require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
const qs = require('querystring');
const hh = require('./services/hh'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª hh.js

const app = express();
app.use(cors());
app.use(bodyParser.json());

let accessToken = null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
let storedRefreshToken = null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/auth', (req, res) => {
  const state = 'random_state'; // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const url = `https://hh.ru/oauth/authorize?response_type=code&client_id=${process.env.HH_CLIENT_ID}&redirect_uri=${process.env.REDIRECT_URI}&state=${state}`;
  res.redirect(url);  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HH
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
app.get('/callback', async (req, res) => {
  const code = req.query.code;
  if (!code) {
    return res.status(400).json({ error: 'Missing authorization code' });
  }

  try {
    const tokens = await hh.getToken(code);
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', tokens);

    accessToken = tokens.access_token;
    storedRefreshToken = tokens.refresh_token;

    const deepLink = `exp://10.0.0.56:8081/--/auth-success?access_token=${tokens.access_token}&refresh_token=${tokens.refresh_token}`;
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', deepLink);

    // –í–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ redirect ‚Äî –ø–æ–∫–∞–∂–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π
    res.send(`
      <html>
        <head>
          <title>–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</title>
        </head>
        <body>
          <h2>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</h2>
          <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AutoApply.</p>
          <a href="${deepLink}">
            <button style="padding: 10px 20px; font-size: 16px;">–û—Ç–∫—Ä—ã—Ç—å AutoApply</button>
          </a>
          <script>
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            window.location = "${deepLink}";
          </script>
        </body>
      </html>
    `);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to get token' });
  }
});
app.get('/me', async (req, res) => {
  if (!accessToken) {
    return res.status(401).json({ error: 'No token available' });
  }

  try {
    const response = await axios.get('https://api.hh.ru/me', {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    res.json(response.data);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ /me:', e.response?.data || e.message);
    res.status(e.response?.status || 500).json({ error: 'Token invalid or expired' });
  }
});

app.get('/dialogs', async (req, res) => {
  if (!accessToken) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    const response = await axios.get('https://api.hh.ru/negotiations', {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const dialogs = response.data.items || [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º employer –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    const enrichedDialogs = await Promise.all(dialogs.map(async (dialog) => {
      try {
        const vacancyId = dialog.vacancy?.id;
        if (!vacancyId) return dialog;
    
        const vacancyRes = await axios.get(`https://api.hh.ru/vacancies/${vacancyId}`, {
          headers: { Authorization: `Bearer ${accessToken}` },
        });
    
        const employer = vacancyRes.data.employer;
    
        // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ /employers/{id}
        const employerDetails = await axios.get(`https://api.hh.ru/employers/${employer.id}`, {
          headers: { Authorization: `Bearer ${accessToken}` },
        });
    
        return {
          ...dialog,
          employer: {
            ...employer,
            last_online: employerDetails.data.last_online_at,
            response_rate: employerDetails.data.response_rate,
          },
        };
      } catch (e) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${dialog.vacancy?.id}`, e.message);
        return dialog;
      }
    }));
    
    res.json({ items: enrichedDialogs });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch dialogs' });
  }
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
app.get('/dialogs/:id/messages', async (req, res) => {
  const dialogId = req.params.id;
  if (!accessToken) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    const response = await axios.get(`https://api.hh.ru/negotiations/${dialogId}/messages`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });
    console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∏–∞–ª–æ–≥—É ${dialogId}:`, response.data);
    res.json(response.data);
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ${dialogId}:`, e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
});

app.get('/resumes', async (req, res) => {
  if (!accessToken) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    const response = await axios.get('https://api.hh.ru/resumes/mine', {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    res.json(response.data);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch resumes' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
app.get('/vacancies', async (req, res) => {
  if (!accessToken) {
    return res.status(401).json({ error: 'Unauthorized. Please login first.' });
  }

  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º accessToken:', accessToken);

  const {
    text = '',
    category = '',
    salary_from = '',
    salary_to = '',
    only_with_salary,
    experience,
    page = 0,
    per_page = 20,
  } = req.query;
  
  const params = {
    text,
    specialization: category,
    salary_from,
    salary_to,
    experience,
    page,
    per_page,
  };
  
  if (only_with_salary === 'true') {
    params.only_with_salary = true;
  }

  try {
    const response = await axios.get('https://api.hh.ru/vacancies', {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
      params,
    });

    res.json(response.data);
  } catch (e) {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ (401), –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
    if (e.response && e.response.status === 401) {
      console.warn('üîÑ Access token –∏—Å—Ç—ë–∫. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...');
      try {
        await refreshToken(); // –æ–±–Ω–æ–≤–∏—Ç accessToken –∏ storedRefreshToken
        // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const retry = await axios.get('https://api.hh.ru/vacancies', {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
          params,
        });
        return res.json(retry.data);
      } catch (refreshError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError.response?.data || refreshError.message);
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.' });
      }
    }

    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch vacancies' });
  }
});

// –í —Ç–≤–æ—ë–º backend-–µ, –≤ /vacancies/:id/apply
app.post('/vacancies/:id/apply', async (req, res) => {
  const { id } = req.params;
  const { message } = req.body;

  if (!accessToken) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
    const resumeRes = await axios.get('https://api.hh.ru/resumes/mine', {
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    const resume =
      Array.isArray(resumeRes.data.items) && resumeRes.data.items.length > 0
        ? resumeRes.data.items[0]
        : Array.isArray(resumeRes.data) && resumeRes.data.length > 0
        ? resumeRes.data[0]
        : null;

    if (!resume || !resume.id) {
      console.error('‚ùå –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return res.status(400).json({ error: 'No resume found' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!id) {
      console.error('‚ùå vacancy_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return res.status(400).json({ error: 'Missing vacancy_id' });
    }

    console.log(`‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫: vacancy_id=${id}, resume_id=${resume.id}`);

    const applyPayload = {
      vacancy_id: id,
      resume_id: resume.id,
    };

    if (message) {
      applyPayload.message = message;
    }

    const response = await axios.post(
      'https://api.hh.ru/negotiations',
      qs.stringify({
        vacancy_id: id,
        resume_id: resume.id,
        ...(message ? { message } : {})
      }),
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    res.status(response.status).json({
      success: true,
      state: response.data.state || { id: 'response' }, // <- –≤–∞–∂–Ω–æ
    });
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ${id}:`, e.response?.data || e.message);
    res.status(e.response?.status || 500).json({ error: 'Failed to apply to vacancy' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
async function getToken(code) {
  const params = {
    grant_type: 'authorization_code',
    client_id: process.env.HH_CLIENT_ID,
    client_secret: process.env.HH_CLIENT_SECRET,
    code: code,
    redirect_uri: process.env.REDIRECT_URI,
  };

  try {
    const response = await axios.post('https://api.hh.ru/token', qs.stringify(params), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh_token
async function refreshToken() {
  const params = {
    grant_type: 'refresh_token',
    client_id: process.env.HH_CLIENT_ID,
    client_secret: process.env.HH_CLIENT_SECRET,
    refresh_token: storedRefreshToken,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  };

  try {
    const response = await axios.post('https://api.hh.ru/token', qs.stringify(params), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });
    console.log('–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data);
    accessToken = response.data.access_token;  // –û–±–Ω–æ–≤–ª—è–µ–º access_token
    storedRefreshToken = response.data.refresh_token;  // –û–±–Ω–æ–≤–ª—è–µ–º refresh_token
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
    throw error;
  }
}

app.listen(process.env.PORT, '0.0.0.0', () => {
  console.log(`Server is running on port ${process.env.PORT}`);
});
